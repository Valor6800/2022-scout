<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <title>Valor Scout</title>
</head>
<body>
    <div class="w3-cell">

        <h3 id="total_errors">Total Errors: Calculating</h3>

        <!-- Bottom panel -->
        <div class="w3-row">
            <div class="w3-bar w3-black">
                <button class="w3-bar-item w3-button w3-grey" onclick="openTab(this, 'tab_match_errors')">Match Errors</button>
                <button class="w3-bar-item w3-button" onclick="openTab(this, 'tab_student_errors')">Student Errors</button>
            </div>

            <div id="tab_match_errors" class="tab">
                <div class="w3-responsive">
                    <table class="w3-table w3-striped w3-hoverable w3-small" id="table_match_errors"></table>
                </div>
            </div>

            <div id="tab_student_errors" class="tab">
                <div class="w3-responsive">
                    <table class="w3-table w3-striped w3-hoverable w3-small" id="table_student_errors"></table>
                </div>
            </div>
        </div>

    </div>
</body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>

<script id="header-match-errors" type="text/template">
    <thead class="w3-grey">
        <td onclick="sortTable(0, 0)">Match</td>
        <td onclick="sortTable(1, 0)">Total</td>
        <td>Mobility</td>
        <td>Auto Speaker</td>
        <td>Auto Amp</td>
        <td>Teleop Speaker</td>
        <td>Teleop Amp</td>
        <td>End Game</td>
        <td>Co-op</td>
    </thead>
</script>

<script id="header-student-errors" type="text/template">
    <thead class="w3-grey">
        <td>Student</td>
        <td onclick="sortTable(1, 1)">Avg</td>
        <td onclick="sortTable(2, 1)">Matches</td>
        <td onclick="sortTable(3, 1)">Total</td>
        <td>Mobility</td>
        <td>Auto Speaker</td>
        <td>Auto Amp</td>
        <td>Teleop Speaker</td>
        <td>Teleop Amp</td>
        <td>End Game</td>
        <td>Co-op</td>
    </thead>
</script>

<script id="template-match-errors" type="text/template">
    <tr>
        <td>{{matchNum}}</td>
        <td>{{total}}</td>
        <td>{{mobility}}</td>
        <td>{{autoSpeaker}}</td>
        <td>{{autoAmp}}</td>
        <td>{{teleopSpeaker}}</td>
        <td>{{teleopAmp}}</td>
        <td>{{endGame}}</td>
        <td>{{coop}}</td>
    </tr>
</script>

<script id="template-student-errors" type="text/template">
    <tr>
        <td>{{student}}</td>
        <td>{{avg}}</td>
        <td>{{matches}}</td>
        <td>{{total}}</td>
        <td>{{mobility}}</td>
        <td>{{autoSpeaker}}</td>
        <td>{{autoAmp}}</td>
        <td>{{teleopSpeaker}}</td>
        <td>{{teleopAmp}}</td>
        <td>{{endGame}}</td>
        <td>{{coop}}</td>
    </tr>
</script>

<script>
    function sortTable(n, tid_mray, specialDir=null) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById(tid_mray == 0 ? "table_match_errors" : "table_student_errors");
        switching = true;
        dir = "asc";
        if (specialDir != null) {
            dir = specialDir
        }
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
            shouldSwitch = false;
            x = rows[i].getElementsByTagName("TD")[n];
            y = rows[i + 1].getElementsByTagName("TD")[n];
            if (dir == "asc") {
                if (parseFloat(x.innerHTML.toLowerCase()) > parseFloat(y.innerHTML.toLowerCase())) {
                shouldSwitch = true;
                break;
                }
            } else if (dir == "desc") {
                if (parseFloat(x.innerHTML.toLowerCase()) < parseFloat(y.innerHTML.toLowerCase())) {
                shouldSwitch = true;
                break;
                }
            }
            }
            if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            switchcount ++;
            } else {
            if (switchcount == 0 && dir == "asc") {
                dir = "desc";
                switching = true;
            }
            }
        }
    }

    function populateMatchErrors(data)
    {
        var MatchErrorsHeader = document.getElementById("header-match-errors");
        var MatchErrorsTemplate = document.getElementById("template-match-errors");
        var MatchErrorsHeaderHTML = MatchErrorsHeader.innerHTML;
        var MatchErrorsTemplateHTML = MatchErrorsTemplate.innerHTML;

        if (data) {
            var listHtml = MatchErrorsHeaderHTML;

            let matchTotal = 0;
			for (const [match, allianceData] of Object.entries(data)) {
                const total = allianceData.red.mobility + allianceData.blue.mobility +
                                        allianceData.red.autoSpeaker + allianceData.blue.autoSpeaker +
                                        allianceData.red.autoAmp + allianceData.blue.autoAmp +
                                        allianceData.red.teleopSpeaker + allianceData.blue.teleopSpeaker +
                                        allianceData.red.teleopAmp + allianceData.blue.teleopAmp +
                                        allianceData.red.endGame + allianceData.blue.endGame +
                                        allianceData.red.coop + allianceData.blue.coop;
                matchTotal += total;
                listHtml += MatchErrorsTemplateHTML.replace(/{{matchNum}}/g, match)
                                      .replace(/{{mobility}}/g, allianceData.red.mobility + allianceData.blue.mobility)
                                      .replace(/{{autoSpeaker}}/g, allianceData.red.autoSpeaker + allianceData.blue.autoSpeaker)
                                      .replace(/{{autoAmp}}/g, allianceData.red.autoAmp + allianceData.blue.autoAmp)
                                      .replace(/{{teleopSpeaker}}/g, allianceData.red.teleopSpeaker + allianceData.blue.teleopSpeaker)
                                      .replace(/{{teleopAmp}}/g, allianceData.red.teleopAmp + allianceData.blue.teleopAmp)
                                      .replace(/{{endGame}}/g, allianceData.red.endGame + allianceData.blue.endGame)
                                      .replace(/{{coop}}/g, allianceData.red.coop + allianceData.blue.coop)
                                      .replace(/{{total}}/g, total)
            }

            document.getElementById("table_match_errors").innerHTML = listHtml;
            document.getElementById("total_errors").innerHTML = "Total Errors: " + matchTotal;
            sortTable(1, 0, "desc");
        }
    }

    function populateStudentErrors(data)
    {
        var StudentErrorsHeader = document.getElementById("header-student-errors");
        var StudentErrorsTemplate = document.getElementById("template-student-errors");
        var StudentErrorsHeaderHTML = StudentErrorsHeader.innerHTML;
        var StudentErrorsTemplateHTML = StudentErrorsTemplate.innerHTML;

        if (data) {
            var listHtml = StudentErrorsHeaderHTML;

			for (const [student, studentData] of Object.entries(data)) {
                if (studentData.matches >= 10) {
                    listHtml += StudentErrorsTemplateHTML.replace(/{{student}}/g, student)
                                        .replace(/{{matches}}/g, studentData.matches)
                                        .replace(/{{mobility}}/g, studentData.mobility*3)
                                        .replace(/{{autoSpeaker}}/g, studentData.autoSpeaker)
                                        .replace(/{{autoAmp}}/g, studentData.autoAmp)
                                        .replace(/{{teleopSpeaker}}/g, studentData.teleopSpeaker)
                                        .replace(/{{teleopAmp}}/g, studentData.teleopAmp)
                                        .replace(/{{endGame}}/g, studentData.endGame*3)
                                        .replace(/{{coop}}/g, studentData.coop*5)
                                        .replace(/{{total}}/g, studentData.total)
                                        .replace(/{{avg}}/g, (studentData.avg).toFixed(1))
                }
            }
            document.getElementById("table_student_errors").innerHTML = listHtml;
            sortTable(1, 1)
        }
    }

    function populateData(data)
    {
        data = JSON.parse(data);
        populateMatchErrors(data.matchErrors)
        populateStudentErrors(data.studentErrors)
    }

    function httpGetAsync(theUrl, callback)
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function() { 
            if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
                callback(xmlHttp.responseText);
        }
        xmlHttp.open("GET", theUrl, true);
        xmlHttp.send(null);
    }

    function openTab(context, tabName) {
        let x = document.getElementsByClassName("tab");
        for (let i = 0; i < x.length; i++) {
            x[i].style.display = "none";
        }
        let tablinks = document.getElementsByClassName("w3-bar-item");
        for (let i = 0; i < x.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" w3-grey", "");
        }
        context.className += " w3-grey";
        document.getElementById(tabName).style.display = "block";
    }

    httpGetAsync('errors', populateData);

</script>

</html>